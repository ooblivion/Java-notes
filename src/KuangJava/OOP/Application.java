package KuangJava.OOP;

import KuangJava.OOP.OOPFeature.A;
import KuangJava.OOP.OOPFeature.B;

public class Application {
    public static void main(String[] args) {

        //方法的调用只和左边有关，也就是定义的数据类型有关

        A a = new A();
        a.test();
        //虽然可以执行，但是有个警告，通过实例调用是不规范发，static要用类直接调用
        //static也能够通过了类直接调用

        //static修饰符可以直接不需要创建类，直接类名点的方式可以在main方法中调用
        //静态方法，可以直接通过类访问，也可以通过实例访问（共享）

        //向上转型
        //父类引用指向子类对象
        //父类的引用指向了子类
        //用B类新建了A类的对象，把A赋值给了B，这时候B是A，A又继承了B，向上转型。所以调用B类方法的时候也就是B=>test
        B b = new A();
        b.test();
        //b只是一个变量而已，保存了一个new A()的一个内存地址去指向这个new出来的A

        //从内存的角度分析，在堆中创建了一个B类的空间来存放A类的对象
        //从方法区调用时，默认调用的是B空间的方法

        //静态不能被重写
        //override就是覆盖，也就是重写
        //重载是同一个方法不同参数
        //============================
        //静态方法是类的方法而非静态方法是对象的方法
        //即b是A new 出来的对象，因此调用了A的方法

        //优先级是类大于对象

        //可以这样理解，静态属于类，非静态属于对象

        /*
         * 静态方法和非静态方法有区别
         * 静态方法 方法调用只和左边定义的数据有关
         * 非静态 重写，关键字只能是public，不能是private
         * 父类的修饰符只要不是private都可以重写
         *
         * 重写 需要有继承关系，子类子类重写父类的方法
         * 1.方法名必须相同
         * 2.参数列表必须相同
         * 3.修饰符 范围可以扩大 public >protected > default > private
         * 4.抛出的异常 范围 可以被缩小但不能扩大 ClassNotFoundException --> Exception 大
         *
         * 重写，子类的方法和父类必须要一致，方法体不同
         *
         * 为什么需要重写？
         * 1.父类的功能子类不一定需要或者满足
         * Alt+insert override
         *
         * 为什么要重写？自己定义一个方法不可以吗？
         * 自己定义新的方法不规范，为了统一接口，所有重写父类
         * 子类本来可以继承父类的，重写可以改啊
         *
         */

        //刚开始没有重写，A继承了B的，所以是B=>test()，后来A重写了方法就变成了A=>test()

        //重写的意义何在？反正子类都可以调用父类的方法
        //重写的意义是展示子类自己与父类的不同
        //private修饰只能本类内访问，所以不能在其他类中使用，更别说重写
        //子类重写大方法访问级别要大于等于父类。抛出异常的声明要小于等于父类

        //重写是在继承里面才有的概念，重载是一个类里面的概念

        //super关键字像是留了一个后门，可以访问受保护的数据

        //重写就是你子类想用改父类的某个方法，用重写

        //参数不同也是重载

        //重写异常抛出范围不能呢大于父类

        //返回值可以不同，但是改变后的类型必须是修改前类型的子类型

        //返回值不同叫重载

        //返回值类型需要是父类对应返回值类型的子类型是相同的

        //返回值参数必须相同

        //重写的返回值类型可以不相同，只要是父类返回类型的子类就行了，比如父类返回Objet，子类可以返回String

        //继承和重写是多态的条件

        //假如父类（动物类）定义的方法为动物叫声，子类不同会导致叫声也不同，这时候就可以重写，再重写父类原有动物叫方法，改sout喵喵叫，其他子类以此类推

    }
}
